import asyncio
import cv2
import os
import numpy as np
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import FSInputFile, Message
from aiogram.client.session.aiohttp import AiohttpSession
from ultralytics import YOLO

# üîí –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7219854065:AAF9HPxkzr63qGpV2KRg3AH1UtkT7g9FdkU"

# üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLO
model = YOLO(r"C:\Users\Rudeus\Desktop\Projekttt\my_experiment2\weights\best.pt")

# üìÇ –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
output_dir = r"C:\Users\Rudeus\Desktop\photo"
os.makedirs(output_dir, exist_ok=True)

# üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –±–ª—é–¥–∞ (–≤ —Ç–µ–Ω–≥–µ)
PRICES = {
    "Biliash": 400, "Bivshteks": 450, "Jarkoe": 600, "Kasha": 400,
    "Kotleta_s_sirom": 800, "Kruasan": 400, "Kurica_i_gribi": 1000, "Latte": 180,
    "Macchoco": 180, "Maccoffe": 140, "Miaso_po_tai": 1000, "Pirojok": 350,
    "Pure": 200, "Sosiska": 150, "Sosiska_v_teste": 350, "Vareniki": 780,
    "chai": 120, "grechka": 200, "ris": 200, "snickers": 450
}

# üîß –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
session = AiohttpSession()
bot = Bot(token=TOKEN, session=session)
dp = Dispatcher()
router = Router()
dp.include_router(router)


async def process_image(image_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YOLO, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –µ–¥—ã, —Å—á–∏—Ç–∞–µ—Ç —Ü–µ–Ω—É –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ –ø–æ–¥–Ω–æ—Å—É"""
    results = model(image_path)
    img = cv2.imread(image_path)

    detected_items = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
    tray_bbox = None  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥–Ω–æ—Å–∞

    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            class_id = int(box.cls[0])
            confidence = box.conf[0] * 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            label = f"{model.names[class_id]} {confidence:.1f}%"  # –ù–∞–∑–≤–∞–Ω–∏–µ + —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

            # –†–∏—Å—É–µ–º —Ä–∞–º–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 3)
            cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–¥–Ω–æ—Å ‚Äì –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if model.names[class_id].lower() == "podnos":
                tray_bbox = (x1, y1, x2, y2)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ (–±–µ–∑ –ø–æ–¥–Ω–æ—Å–∞)
            else:
                item_name = model.names[class_id]
                detected_items[item_name] = detected_items.get(item_name, 0) + 1

    # –ï—Å–ª–∏ –ø–æ–¥–Ω–æ—Å –Ω–∞–π–¥–µ–Ω ‚Äì –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if tray_bbox:
        x1, y1, x2, y2 = tray_bbox
        img = img[y1:y2, x1:x2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    output_path = os.path.join(output_dir, "result.jpg")
    cv2.imwrite(output_path, img)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_price = 0
    items_text = []

    for item, count in detected_items.items():
        price = PRICES.get(item, 0) * count
        total_price += price
        items_text.append(f"{item} x{count} ‚Äî {price} KZT")

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    caption = "\n".join(items_text) + f"\n\nüí∞ **–ò—Ç–æ–≥: {total_price} KZT**" if items_text else "–ï–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    return output_path, caption


@router.message(lambda message: message.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    img_path = os.path.join(output_dir, f"{photo.file_id}.jpg")

    await bot.download_file(file.file_path, img_path)

    output_path, caption = await process_image(img_path)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
    photo_file = FSInputFile(output_path)
    await message.answer_photo(photo_file, caption=caption)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
